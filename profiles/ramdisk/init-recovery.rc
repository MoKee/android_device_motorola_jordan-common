import /init.recovery.${ro.hardware}.rc

on early-init
    start ueventd

on init
    export PATH /sbin
    export LD_LIBRARY_PATH .:/sbin
    export ANDROID_ROOT /system
    export ANDROID_DATA /data
    export EXTERNAL_STORAGE /sdcard

    symlink /system/etc /etc

    mkdir /sdcard
    mkdir /sd-ext
    mkdir /system
    mkdir /data
    mkdir /cache
    mkdir /pds 0775 system system
    mount /tmp /tmp tmpfs
    chown root shell /tmp
    chmod 0775 /tmp

    mount ext4 /dev/block/mmcblk1p25 /data wait noatime nodiratime nodev nobh data=writeback noauto_da_alloc barrier=0
    mkdir /data/tmp/battd 0770 root system
    chown root system /data/tmp/battd
    chmod 0770 /data/tmp/battd

    write /sys/power/sr_vdd1_autocomp 1
    write /sys/power/sr_vdd2_autocomp 1

on boot

    ifup lo
    hostname localhost
    domainname localdomain


    write /dev/usb_device_mode charge_adb
    start adbd
    start battd

    class_start default

service ueventd /sbin/ueventd
    critical

service recovery /sbin/recovery

service adbd /sbin/adbd recovery
    disabled

service battd /sbin/battd
    socket battdsock stream 660 root system
    user root
    group system 9001
    oneshot

# Always start adbd on userdebug and eng builds
on property:ro.debuggable=1
    start adbd
    setprop service.adb.root 1

# Restart adbd so it can run as root
on property:service.adb.root=1
    restart adbd

